name: Build & Publish Docker image

on:
  push:
    branches: [ main ]              # when PRs are merged to main
  pull_request:
    branches: [ main ]              # test build on PRs

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    name: Build & (conditionally) Push
    runs-on: ubuntu-latest
    environment: dockerhub          # create this env and add DOCKERHUB_TOKEN secret
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Extract project version from pyproject.toml
        id: version
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(python -c "import tomllib, pathlib; p=pathlib.Path('pyproject.toml'); d=tomllib.loads(p.read_text(encoding='utf-8')); v=(d.get('project') or {}).get('version'); print(v) if v else (_ for _ in ()).throw(SystemExit('No [project].version in pyproject.toml'))")
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Project version: ${VERSION}"

      - name: Compute Docker image name
        id: img
        shell: bash
        run: |
          set -euo pipefail
          REPO_NAME="${GITHUB_REPOSITORY#*/}"   # owner/repo -> repo
          REPO_NAME_LC="$(printf "%s" "$REPO_NAME" | tr '[:upper:]' '[:lower:]')"
          echo "name=mattcoulter7/${REPO_NAME_LC}" >> "$GITHUB_OUTPUT"
          echo "Image: mattcoulter7/${REPO_NAME_LC}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (only on push to main)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
        uses: docker/login-action@v3
        with:
          username: mattcoulter7
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (PR) or Build & Push (main)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
          tags: |
            ${{ steps.img.outputs.name }}:${{ steps.version.outputs.version }}
            ${{ steps.img.outputs.name }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
